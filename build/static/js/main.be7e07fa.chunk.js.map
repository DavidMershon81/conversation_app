{"version":3,"sources":["hooks/useGetData.js","components/MiscControls.js","components/DebugUsersView.js","contexts/AppContext.js","components/PetitionGroupView.js","hooks/usePostData.js","contexts/FormContext.js","components/FormControls.js","components/AddPetitionGroupForm.js","components/AddPetitionGroupView.js","components/AddPetitionForm.js","components/AddPetitionView.js","components/SignPetitionForm.js","components/SignPetitionSection.js","components/PetitionView.js","hooks/useLogin.js","components/LoginForm.js","components/LoginView.js","components/RegisterUserForm.js","components/RegisterView.js","components/HomeView.js","components/TopNavSection.js","App.js","reportWebVitals.js","index.js"],"names":["useGetData","url","params","useState","data","setData","loading","setLoading","error","setError","errorMessage","setErrorMessage","isMounted","useRef","onResponseError","current","response","getData","useCallback","axios","get","then","useEffect","SimpleButton","id","text","onBtnClick","className","type","onClick","LoadingBox","DebugUsersView","users","map","user","AppContext","createContext","PetitionGroupPetitionsSection","petitionGroupId","requestParams","petition_group_id","petitions","length","petition","index","to","PetitionGroupMembersSection","members","showMembers","setShowMembers","showMembersBtnText","member","PetitionGroupSummary","petitionGroup","PetitionGroupView","basePath","loggedInUser","useContext","useLocation","pathname","replace","group_name","usePostData","authToken","onConfirm","confirmText","confirmMessage","setConfirmMessage","responseData","setResponseData","post","newData","requstConfig","FormContext","FormErrorMessage","varName","visibleName","validateErrorMessage","errors","errorPresent","requiredError","validateError","FormTextInput","validateFunction","register","formParams","required","validate","rows","placeholder","FormRadioButton","valueName","valueText","value","FormRadioButtonGroup","buttonsConfig","FormHiddenInput","varValue","AddGroupFormFormRadioBtnGroup","AddPetitionGroupFormEmailSection","unregister","watch","customEmails","setCustomEmails","selectedRadioBtn","addCustomEmail","nextIndex","ce","AddPetitionGroupForm","onSubmit","useForm","handleSubmit","formState","console","log","Provider","AddPetitionGroupView","postGroup","AddPetitionForm","AddPetitionView","postPetition","SignPetitionForm","SignPetitionSection","postSignature","SignaturesList","petition_id","sigData","getSignatures","userSignedData","getUserSigned","usLoading","usError","usErrorMessage","show_sign_form","revealed_signatures","rs","unrevealed_signatures","us","PetitionView","petitionId","useLogin","setLoggedInUser","triedLogin","setTriedLogin","tryLogin","username","password","auth","LoginForm","LoginView","formData","email","RegisterUserForm","getValues","RegisterView","postUser","HomeView","groups","TopNavSection","logout","App","login_info","user_email","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be7e07fa.chunk.js","sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react'\nimport axios from 'axios';\n\nconst useGetData = ({ url, params }) => {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const isMounted = useRef(true);\n\n    const onResponseError = (error) => {\n      if(isMounted.current) {\n        setLoading(false);\n        setError(true);\n        setErrorMessage(error.response.data['message']);\n      }\n    };\n\n    const getData = useCallback(() => {\n      if(isMounted.current) {\n        setLoading(true);\n        setError(false);\n        setErrorMessage(\"\");\n      }\n      \n      axios.get(url, { 'params' : params }).then((response) => {\n        if(isMounted.current) {\n          setData(response.data);\n          setLoading(false);\n        }\n        }, onResponseError);\n    }, [url, params])\n\n    useEffect(() => {\n      getData();\n\n      return () => {\n        isMounted.current = false;\n      };\n    },[getData]);\n\n    return { data, getData, loading, error, errorMessage };\n}\n\nexport default useGetData\n","const SimpleButton = ({ id, text, onBtnClick, className }) => {\n    const onClick = () => {\n        onBtnClick(id, text);\n    }\n\n    return (<button className={className} type=\"button\" onClick={onClick}>{text}</button>);\n}\n\nconst LoadingBox = ({ loading, error, errorMessage }) => {\n    return (\n        <>\n        { \n            (loading || error) &&\n            <div className=\"loading_box\">\n            {loading && <p>Loading...</p>}\n            {error && <p>error: {errorMessage}</p>}\n            </div>\n        }\n        </>\n    );\n};\n\nexport { SimpleButton, LoadingBox };","import useGetData from  '../hooks/useGetData';\nimport { LoadingBox } from './MiscControls';\n\nconst DebugUsersView = () => {\n  const { data:users, loading, error, errorMessage } = useGetData({ \n    url:'/api/users'\n  });\n\n  return (\n      <section>\n        <h2>Users (Debug View)</h2>\n        <p>This page shows all of the users in the app.</p>\n        <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n        <ul className='users_list_group'>\n          { users && users.map((user) => \n              <li key={user['id']} className='users_list_item'>id:{user['id']} | {user['email']}<br/>{user['first_name']} {user['last_name']}</li>\n          )}\n        </ul>\n      </section>\n  );\n}\n\nexport default DebugUsersView\n","import { createContext } from 'react';\n\nexport const AppContext = createContext({});","import { useLocation, Link, Redirect } from 'react-router-dom';\nimport useGetData from  '../hooks/useGetData'\nimport { LoadingBox, SimpleButton } from './MiscControls';\nimport { useRef, useContext, useState } from 'react';\nimport { AppContext } from '../contexts/AppContext';\n\nconst PetitionGroupPetitionsSection = ({ petitionGroupId }) => {\n  const requestParams = useRef({ petition_group_id : petitionGroupId });\n  const { data:petitions, loading, error, errorMessage } = useGetData({ \n      url:'/api/petitions', \n      params:requestParams.current\n  });\n    \n  return (\n    <section className='petition_group_section'>\n    <strong>Petitions</strong>\n    <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n    <ul className='petitions_list_group'>\n    { (petitions && petitions.length > 0) ? petitions.map((petition, index) => \n      <li className='petitions_list_item' key={index}>\n          <Link className='petitions_list_btn' to={`/petitions/${petition['id']}`}>View</Link>\n          <span>Subject: {petition['subject']}</span>\n      </li>) : \n      <p>This group has no petition yet.</p>\n    }\n    </ul>\n      {petitions && <div className='add_petition_group_btn'>\n        <Link className='add_petition_btn_text' to={`/add_petition/${petitionGroupId}`}>Add New Petition</Link>\n      </div>}\n    </section>\n  );\n};\n\nconst PetitionGroupMembersSection = ({ petitionGroupId }) => {\n  const requestParams = useRef({ petition_group_id : petitionGroupId });\n  const { data:members, loading, error, errorMessage } = useGetData({ \n      url:'/api/members', \n      params:requestParams.current,\n  });\n\n  const [showMembers, setShowMembers] = useState(false);\n  const showMembersBtnText = showMembers ? 'Hide' : 'Show';\n\n  const onToggleMembers = (id, text) => {\n    setShowMembers(!showMembers);\n  };\n\n  return (\n    <section className='petition_group_section'>\n      <strong>Members</strong>\n      <SimpleButton className='full_width_btn' onBtnClick={onToggleMembers} text={showMembersBtnText}/>\n      <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n      {showMembers && <ul className='users_list_group'>\n      { (members && members.length > 0) ? members.map((member) => \n        <li className='users_list_item' key={member['email']}>{member['email']}</li>) : \n        <p>This group has no members yet.</p>\n      }\n      </ul>}\n    </section>\n  );\n};\n  \nconst PetitionGroupSummary = ({ petitionGroup }) => {\nreturn (\n    <p>\n        <strong>id:</strong> {petitionGroup['id']}<br/>\n        <strong>listserv_email:</strong> {petitionGroup['listserv_email']}<br/>\n    </p>\n    );\n};\n\nconst PetitionGroupView = ({ basePath }) => {\n  const { loggedInUser } = useContext(AppContext);\n  const location = useLocation();\n  const petitionGroupId = location.pathname.replace(basePath, '');\n  const { data:petitionGroup, loading, error, errorMessage } = useGetData({ \n    url:`/api/petition_groups/${petitionGroupId}`\n  });\n\n  if(!loggedInUser) {\n    return <Redirect to='/login' />\n  }\n  return (\n      <section className='petition_group_view'>\n          <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n          { petitionGroup && (<>\n          <h2>Petition Group: {petitionGroup.group_name}</h2>\n          <PetitionGroupSummary petitionGroup={petitionGroup} />\n          <PetitionGroupMembersSection petitionGroupId={petitionGroupId} />\n          <PetitionGroupPetitionsSection petitionGroupId={petitionGroup['id']} /></>) }\n      </section>\n  );\n}\n\nexport default PetitionGroupView;","import { useState } from 'react'\nimport axios from 'axios';\n\nconst usePostData = ({ url, authToken, onConfirm, confirmText }) => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [confirmMessage, setConfirmMessage] = useState(\"\");\n    const [responseData, setResponseData] = useState(null);\n\n    const onResponseError = (error) => {\n      setLoading(false);\n      setError(true);\n      setErrorMessage(error.response.data['message']);\n    };\n\n    const post = (newData) => {\n        setLoading(true);\n        setError(false);\n        setErrorMessage(\"\");\n        setConfirmMessage(\"\");\n        setResponseData(null);\n\n        const requstConfig = { \n            'headers' : {'Authorization' : authToken} \n        };\n        axios.post(url, newData, requstConfig).then((response) => {\n            setLoading(false);\n            setResponseData(response.data);\n            setConfirmMessage(confirmText);\n\n            if(onConfirm) {\n                onConfirm();\n            }\n        }, onResponseError);\n    }\n\n    return { post, responseData, loading, error, confirmMessage, errorMessage  };\n}\n\nexport default usePostData;\n","import { createContext } from 'react';\n\nexport const FormContext = createContext({});","import { useContext } from 'react';\nimport { FormContext } from '../contexts/FormContext';\n\nconst FormErrorMessage = ({ varName, visibleName, validateErrorMessage }) => {\n    const { errors } = useContext(FormContext);\n    const errorPresent = errors[varName] != null;\n    const requiredError = errorPresent && errors[varName].type === 'required';\n    const validateError = errorPresent && errors[varName].type === 'validate';\n\n    if(requiredError || validateError) {\n        const errorMessage = validateError ? validateErrorMessage :`${visibleName} required!`;\n        return (<span className='form_error_message'>{errorMessage}</span>);\n    }\n    return (<span></span>);\n};\n\nconst FormTextInput = ({ varName, visibleName, type, validateFunction=()=> { return true; }, validateErrorMessage }) => {\n    const { register } = useContext(FormContext);\n    const formParams = { \n        required: true,\n        validate: validateFunction\n    };\n\n    return (\n        <>\n            {   \n                type === 'textarea' ? \n                <textarea rows='10' className=\"form_text_area\" placeholder={visibleName} {...register(varName, formParams)} /> :\n                <input className=\"form_text_input\"  type={type} placeholder={visibleName} {...register(varName, formParams)} />\n            }\n            <FormErrorMessage varName={varName} visibleName={visibleName} validateErrorMessage={validateErrorMessage}/>\n        </>\n    );\n};\n\nconst FormRadioButton = ({ varName, valueName, valueText, onClick }) => {\n    const { register } = useContext(FormContext);\n    return (\n        <label className=\"form_checkbox_container\">\n            <input {...register(varName, { required: true })} type=\"radio\" value={valueName} onClick={() => { onClick(valueName);}} />{valueText}\n            <span className=\"checkmark\"></span>\n        </label>\n    );\n};\n\nconst FormRadioButtonGroup = ({ varName, visibleName, buttonsConfig, onClick }) => {\n    return (\n        <fieldset className=\"form_radio_button_set\">\n        { buttonsConfig.map(({ valueName, valueText}) => (\n            <FormRadioButton key={valueName} varName={varName} valueName={valueName} valueText={valueText} onClick={onClick}/>\n        )) }\n        <FormErrorMessage varName={varName} visibleName={visibleName} />\n    </fieldset>\n    )\n};\n\nconst FormHiddenInput = ({ varName, varValue }) => {\n    const { register } = useContext(FormContext);\n    return (<input type=\"hidden\" value={varValue} {...register(varName)} />);\n};\n\nexport { FormErrorMessage, FormTextInput, FormRadioButton, FormRadioButtonGroup, FormHiddenInput };","import { useState, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormTextInput, FormRadioButtonGroup } from './FormControls';\nimport { FormContext } from '../contexts/FormContext';\n\nconst AddGroupFormFormRadioBtnGroup = ({ onBtnClick }) => {\n    const radioButtonsConfig = [\n        { valueName: 'listserv', valueText: 'Send petition to a single mailing list' },\n        { valueName: 'custom_emails', valueText: 'Send petition to a list of email addresses' }\n    ];\n\n    return (\n        <FormRadioButtonGroup \n            varName='email_type' \n            visibleName='email notification type' \n            buttonsConfig={radioButtonsConfig}\n            onClick={onBtnClick}\n        />\n    );\n};\n\nconst AddPetitionGroupFormEmailSection = () => {\n    const { unregister, watch } = useContext(FormContext);\n    const [customEmails, setCustomEmails] = useState([]);\n    const selectedRadioBtn = watch(\"email_type\");\n\n    const addCustomEmail = () => {\n        const nextIndex = `custom_email_${customEmails.length}`;\n        setCustomEmails([...customEmails, nextIndex]);\n    };\n\n    const onEmailTypeClick = (valueName) => {\n        if(valueName === 'listserv') {\n            unregister(customEmails);\n            setCustomEmails([]);\n        }\n        else if(valueName === 'custom_emails') {\n            unregister(['listserv_email']);\n            if(customEmails.length < 1) {\n                addCustomEmail();\n            }\n        }\n    };\n\n    return (\n        <fieldset className='notification_emails_section'>\n            <AddGroupFormFormRadioBtnGroup onBtnClick={onEmailTypeClick} />\n            { selectedRadioBtn === 'custom_emails' && (    \n            <fieldset className='notification_emails_section'>\n                { customEmails.map((ce) => (<FormTextInput key={ce} type='email' varName={ce} visibleName={ce} />)) }\n                <input className=\"add_email_button\" type=\"button\" onClick={addCustomEmail} value=\"Add Another Email\"/>\n            </fieldset>)}\n            \n            {selectedRadioBtn === 'listserv' && (\n            <fieldset className='notification_emails_section'>\n                <FormTextInput type='email' varName='listserv_email' visibleName='mailing list email' />\n            </fieldset>)}\n        </fieldset>\n    );\n};\n\nconst AddPetitionGroupForm = ({ onSubmit }) => {\n    const { register, unregister, handleSubmit, formState: { errors }, watch } = useForm();\n    const onSubmitClick = (data) => {\n        console.log(data);\n        onSubmit(data);\n    };\n\n    return (\n        <form className=\"input_form\" onSubmit={handleSubmit(onSubmitClick)}>\n            <FormContext.Provider value={{ register, unregister, watch, errors }}>\n                <FormTextInput type='text' varName='group_name' visibleName='group name' />\n                <AddPetitionGroupFormEmailSection />\n            </FormContext.Provider>\n            <input className=\"form_submit_btn\" type=\"submit\" value=\"Create New Petition Group\"/>\n        </form>\n    );\n}\n\nexport default AddPetitionGroupForm;\n","import usePostData from '../hooks/usePostData';\nimport AddPetitionGroupForm from './AddPetitionGroupForm';\nimport { LoadingBox } from './MiscControls';\nimport { Redirect } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { AppContext } from '../contexts/AppContext';\n\nconst AddPetitionGroupView = () => {\n    const { loggedInUser } = useContext(AppContext);\n    const { post:postGroup, confirmMessage, loading, error, errorMessage } = usePostData({ \n        url:'/api/petition_groups', \n        confirmText:'Added Petition Group'\n    });\n\n    if(!loggedInUser) {\n        return <Redirect to='/login' />\n    }\n    return (\n        <section>\n            <h2>Add Petition Group</h2>\n            <p>Use this form to add a new petition group.</p>\n            <AddPetitionGroupForm onSubmit={postGroup}/>\n            {confirmMessage && <p>{confirmMessage}</p>}\n            <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n        </section>\n    );\n}\n\nexport default AddPetitionGroupView\n","import { useForm } from 'react-hook-form';\nimport { FormTextInput, FormHiddenInput } from './FormControls';\nimport { FormContext } from '../contexts/FormContext';\nimport { Redirect } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { AppContext } from '../contexts/AppContext';\n\nconst AddPetitionForm = ({ onSubmit, petitionGroupId }) => {\n    const { loggedInUser } = useContext(AppContext);\n    const { register, unregister, handleSubmit, formState: { errors }, watch } = useForm();\n    const onSubmitClick = (data) => {\n        console.log(data);\n        onSubmit(data);\n    };\n\n    if(!loggedInUser) {\n        return <Redirect to='/login' />\n    }\n    return (\n        <form className=\"input_form\" onSubmit={handleSubmit(onSubmitClick)}>\n            <FormContext.Provider value={{ register, unregister, watch, errors }}>\n                <FormTextInput type='text' varName='subject' visibleName='subject' />\n                <FormTextInput type='textarea' varName='petition_text' visibleName='petition text' />\n                <FormHiddenInput varName='petition_group_id' varValue={petitionGroupId} />\n            </FormContext.Provider>\n            <input className=\"form_submit_btn\" type=\"submit\" value=\"Add New Petition\"/>\n        </form>\n    );\n}\n\nexport default AddPetitionForm;\n","import usePostData from   '../hooks/usePostData';\nimport AddPetitionForm from './AddPetitionForm';\nimport { LoadingBox } from './MiscControls';\nimport { useLocation } from 'react-router-dom';\n\nconst AddPetitionView = ({ basePath }) => {\n    const location = useLocation();\n    const petitionGroupId = location.pathname.replace(basePath, '');\n    const { post:postPetition, confirmMessage, loading, error, errorMessage } = usePostData({ \n        url:'/api/petitions', \n        confirmText:'Added New Petition'\n    });\n\n    return (\n        <section>\n            <h2>Add Petition</h2>\n            <p>Use this form to add a new petition.</p>\n            <AddPetitionForm petitionGroupId={petitionGroupId} onSubmit={postPetition} />\n            {confirmMessage && <p>{confirmMessage}</p>}\n            <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n        </section>\n    );\n}\n\nexport default AddPetitionView\n","import { useForm } from 'react-hook-form';\nimport { FormTextInput, FormHiddenInput } from './FormControls';\nimport { FormContext } from '../contexts/FormContext';\n\nconst SignPetitionForm = ({ onSubmit, petition }) => {\n    const { register, unregister, handleSubmit, formState: { errors }, watch } = useForm();\n    const onSubmitClick = (data) => {\n        onSubmit(data);\n    };\n\n    return (\n        <form className=\"input_form\" onSubmit={handleSubmit(onSubmitClick)}>\n            <FormContext.Provider value={{ register, unregister, watch, errors }}>\n                <FormTextInput type='number' varName='reveal_threshold' visibleName='reveal threshold' />\n                <FormHiddenInput varName='petition_id' varValue={petition['id']} />\n            </FormContext.Provider>\n            <input className=\"form_submit_btn\" type=\"submit\" value='Sign Petition'/>\n        </form>\n    );\n}\n\nexport default SignPetitionForm;\n","import usePostData from '../hooks/usePostData';\nimport { LoadingBox } from './MiscControls';\nimport SignPetitionForm from './SignPetitionForm';\n\nconst SignPetitionSection = ({ petition, onConfirm }) => {    \n    const { post:postSignature, confirmMessage, loading, error, errorMessage } = usePostData({ \n        url:'/api/signatures', \n        onConfirm:onConfirm,\n        confirmText:'Submitted Signature'\n    });\n\n    return (\n        <section className='users_list_item test_signature_user_box'>\n            <SignPetitionForm onSubmit={postSignature} petition={petition} />\n            {confirmMessage && <p>{confirmMessage}</p>}\n            <LoadingBox loading={loading} error={error} errorMessage={errorMessage}/>\n        </section>\n    );\n}\n\nexport default SignPetitionSection","import { useLocation, Redirect } from 'react-router-dom';\nimport useGetData from  '../hooks/useGetData'\nimport { LoadingBox } from './MiscControls';\nimport SignPetitionSection from './SignPetitionSection';\nimport { useRef, useContext } from 'react';\nimport { AppContext } from '../contexts/AppContext';\n\nconst SignaturesList = ({ petition }) => {\n    const requestParams = useRef({ petition_id : petition['id'] });\n    const { data:sigData, getData:getSignatures, loading, error, errorMessage } = useGetData({ \n        url:'/api/signatures', \n        params:requestParams.current\n    });\n\n    const { data:userSignedData, getData:getUserSigned, usLoading, usError, usErrorMessage } = useGetData({ \n        url:'/api/user_signed',\n        params:requestParams.current\n    });\n\n    const onConfirmSign = () => {\n        getSignatures();\n        getUserSigned();\n    };\n\n    const show_sign_form = userSignedData != null && !userSignedData['user_signed'];\n\n    return (\n        <section>\n            <LoadingBox loading={loading} error={error} errorMessage={errorMessage}/>\n            <LoadingBox loading={usLoading} error={usError} errorMessage={usErrorMessage}/>\n            { sigData && <>\n                <h4>Revealed Signatures</h4>\n                <ul className='test_signature_user_group'>\n                { sigData.revealed_signatures.length < 1 && <li>No signatures have been revealed</li>}\n                { sigData.revealed_signatures.length > 0 && sigData.revealed_signatures.map((rs,index) => \n                <li key={index} className='users_list_item test_signature_user_box'>\n                    {rs}\n                </li>)}\n\n                </ul>\n                <h4>Unrevealed Signatures</h4>\n                <ul className='test_signature_user_group'>\n                { sigData.unrevealed_signatures.length < 1 && <li>There are no unrevealed signatures</li>}\n                { sigData.unrevealed_signatures.length > 0 && sigData.unrevealed_signatures.map((us,index) => \n                <li key={index} className='users_list_item test_signature_user_box'>\n                    There are {us['signatures']} unrevealed signatures at threshold {us['reveal_threshold']}\n                </li>)}\n\n                </ul>\n                { show_sign_form ? <SignPetitionSection petition={petition} onConfirm={onConfirmSign} /> :\n                    <p>You have already signed this petition.</p>\n                }\n            </>}\n        </section>\n    );\n}\n\nconst PetitionView = ({ basePath }) => {\n    const { loggedInUser } = useContext(AppContext);\n    const location = useLocation();\n    const petitionId = location.pathname.replace(basePath, '');\n    const { data:petition, loading, error, errorMessage } = useGetData({ \n        url:`/api/petitions/${petitionId}`\n    });\n\n    if(!loggedInUser) {\n        return <Redirect to='/login' />\n    }\n    return (\n        <section>\n            <LoadingBox loading={loading} error={error} errorMessage={errorMessage}/>\n            {petition && <>\n                <h2>Petition: {petition['subject']}</h2>\n                <p>Petition Text: {petition['petition_text']}</p>\n                <SignaturesList petition={petition}/>          \n            </>}\n        </section>\n    );\n}\n\nexport default PetitionView;","import { useState } from 'react'\nimport axios from 'axios';\n\nconst useLogin = ({ url, setLoggedInUser }) => {\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [triedLogin, setTriedLogin] = useState(false);\n\n    const tryLogin = (username,password) => {\n        const onLoginSuccess = (response) => {\n            setLoggedInUser(username);\n            setLoading(false);\n        };\n\n        const onLoginError = (error) => {\n            setLoading(false);\n            setError(true);\n            setErrorMessage(error.response.data['message']);\n        };\n\n        setLoading(true);\n        setError(false);\n        setErrorMessage(\"\");\n        setTriedLogin(true);\n        axios.get(url, { auth:{ \"username\" : username, \"password\" : password } }).then(onLoginSuccess, onLoginError);\n    };\n\n    return { triedLogin, tryLogin, loading, error, errorMessage };\n}\n\nexport default useLogin\n","import { useForm } from 'react-hook-form';\nimport { FormTextInput } from './FormControls';\nimport { FormContext } from '../contexts/FormContext';\n\nconst LoginForm = ({ onSubmit }) => {\n    const { register, handleSubmit, formState: { errors } } = useForm();\n    const onSubmitClick = (data) => {\n        onSubmit(data);\n    };\n\n    return (\n        <form className=\"input_form\" onSubmit={handleSubmit(onSubmitClick)}>\n            <FormContext.Provider value={{ register, errors }}>\n                <FormTextInput type='email' varName='email' visibleName='email' />\n                <FormTextInput type='password' varName='password' visibleName='password' />\n            </FormContext.Provider>\n            <input className=\"form_submit_btn\" type=\"submit\" value=\"Login\"/>\n        </form>\n    );\n}\n\nexport default LoginForm;\n","import useLogin from  '../hooks/useLogin';\nimport LoginForm from './LoginForm';\nimport { LoadingBox } from './MiscControls';\nimport { useContext } from 'react'\nimport { AppContext } from '../contexts/AppContext';\nimport { Redirect, Link } from 'react-router-dom';\n\nconst LoginView = () => {\n    const { loggedInUser, setLoggedInUser } = useContext(AppContext);\n    const { triedLogin, tryLogin, loading, error, errorMessage } = useLogin({ \n        url:'/api/login', \n        setLoggedInUser:setLoggedInUser\n    });\n\n    const submitLogin = (formData) => {\n        tryLogin(formData.email, formData.password);\n    };\n\n    if((!loading || !triedLogin) && loggedInUser) {\n        return <Redirect to='/' />\n    }\n    return (\n        <section>\n            <h2>Login</h2>\n            { !loggedInUser && <LoginForm onSubmit={submitLogin}/> }\n            { triedLogin && <LoadingBox loading={loading} error={error} errorMessage={errorMessage} /> }\n            { loggedInUser && <p>logged in.</p>}\n            <p>Don't have an account yet?<Link className='inline_link' to={`/register`}>Register A New Account</Link></p>\n        </section>\n    );\n}\n\nexport default LoginView\n","import { useForm } from 'react-hook-form';\nimport { FormTextInput } from './FormControls';\nimport { FormContext } from '../contexts/FormContext';\n\nconst RegisterUserForm = ({ onSubmit }) => {\n    const { register, handleSubmit, formState: { errors }, getValues } = useForm();\n    const onSubmitClick = (data) => {\n        onSubmit(data);\n    };\n\n    const onValidateConfirmPass = (value) => {\n        return getValues('password') === value;\n    }\n\n    return (\n        <form className=\"input_form\" onSubmit={handleSubmit(onSubmitClick)}>\n            <FormContext.Provider value={{ register, errors }}>\n                <FormTextInput type='email' varName='email' visibleName='email' />\n                <FormTextInput type='password' varName='password' visibleName='password' />\n                <FormTextInput \n                    type='password' varName='confirm_password' visibleName='confirm password' \n                    validateFunction={onValidateConfirmPass} validateErrorMessage=\"password doesn't match\"\n                />\n                <FormTextInput type='text' varName='first_name' visibleName='first name' />\n                <FormTextInput type='text' varName='last_name' visibleName='last name' />\n            </FormContext.Provider>\n            <input className=\"form_submit_btn\" type=\"submit\" value=\"Register Account\"/>\n        </form>\n    );\n}\n\nexport default RegisterUserForm;\n","import usePostData from  '../hooks/usePostData';\nimport RegisterUserForm from './RegisterUserForm';\nimport { LoadingBox } from './MiscControls';\n\nconst RegisterView = () => {\n    const onConfirm = () => {\n        console.log(\"confirmed registration!\")\n    };\n\n    const { post:postUser, confirmMessage, loading, error, errorMessage } = usePostData({ \n        url:'/api/users',\n        onConfirm:onConfirm,\n        confirmText:'Registered New Account!'\n    });\n\n    return (\n        <section>\n            <h2>Register</h2>\n            <p>Use this form to register a new account.</p>\n            <RegisterUserForm onSubmit={postUser}/>\n            {confirmMessage && <p>{confirmMessage}</p>}\n            <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n        </section>\n    );\n}\n\nexport default RegisterView\n","import useGetData from  '../hooks/useGetData'\nimport { LoadingBox } from './MiscControls';\nimport { Link, Redirect } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { AppContext } from '../contexts/AppContext';\n\nconst HomeView = () => {\n    const { loggedInUser } = useContext(AppContext);\n    const { data:groups, loading, error, errorMessage } = useGetData({ url:'/api/petition_groups' });\n\n    if(!loggedInUser) {\n        return <Redirect to='/login' />\n    }\n    return (\n        <section>\n            <p>Welcome to the petition app!</p>\n\n            {groups && groups.length > 0 && <p>Here are a list of the petition groups that you're a member of</p>}\n            {groups && groups.length < 1 && <p>You are not a member of any petition groups yet. Would you like to create one?</p>}\n            <ul className='petition_groups_list_group'>\n            {groups && groups.map((petitionGroup) => \n            <li className='petition_groups_list_item' key={petitionGroup['id']}>\n                <Link className='petition_groups_list_btn' to={`/petition_group/${petitionGroup['id']}`}>View</Link>\n                <span>{petitionGroup['group_name']}</span>\n            </li>)}\n            </ul>\n            {groups && <div className='add_petition_group_btn'>\n                <Link className='add_petition_group_text' to='/add_petition_group'>Add New Petition Group</Link>\n            </div>}\n            <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n        </section>\n    );\n}\n\nexport default HomeView\n","\nimport { SimpleButton } from './MiscControls';\nimport { Link } from 'react-router-dom';\nimport { useContext } from 'react'\nimport { AppContext } from '../contexts/AppContext';\n\nconst TopNavSection = () => {\n    const { loggedInUser, logout } = useContext(AppContext);\n\n    const onLogout = (id, text) => {\n        logout();\n    };\n\n    return (\n        <section>\n            <h1 className='top_heading_text'>Petition App Prototype</h1>\n            <nav className='top_nav'>\n                <Link className='nav_link' to='/debug/users'>Users(debug)</Link>\n                { loggedInUser && <Link className='nav_link' to='/'>Home</Link> }\n                { !loggedInUser && <Link className='nav_link' to='/login'>Login</Link> }\n                { loggedInUser && <SimpleButton className='nav_link' onBtnClick={onLogout} text='Logout'/> }\n            </nav>\n            <p className='logged_in_user_text'>{loggedInUser}</p>\n        </section>   \n    );\n}\n\nexport default TopNavSection\n","import './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport DebugUsersView from './components/DebugUsersView';\nimport PetitionGroupView from './components/PetitionGroupView';\nimport AddPetitionGroupView from './components/AddPetitionGroupView';\nimport AddPetitionView from './components/AddPetitionView';\nimport PetitionView from './components/PetitionView';\nimport LoginView from './components/LoginView';\nimport RegisterView from './components/RegisterView';\nimport HomeView from './components/HomeView';\nimport TopNavSection from './components/TopNavSection';\nimport { AppContext } from './contexts/AppContext';\nimport { useState, useEffect } from 'react';\nimport useGetData from  './hooks/useGetData';\nimport usePostData from  './hooks/usePostData';\nimport { LoadingBox } from './components/MiscControls'; \n\nconst App = () => {\n  const [loggedInUser, setLoggedInUser] = useState(null);\n  const onLogoutConfirm = () => {\n    setLoggedInUser(null);\n  }\n  const { data:login_info, loading, error, errorMessage } = useGetData({ url:'/api/get_current_user' });\n  const { post:logout } = usePostData({ \n    url:'/api/logout',\n    onConfirm:onLogoutConfirm\n  });\n  \n  useEffect(() => {\n    if(login_info) {\n      setLoggedInUser(login_info.user_email);\n    }\n  },[login_info]);\n\n  return (\n      <div className=\"App\">\n          <AppContext.Provider value={{ loggedInUser, setLoggedInUser, logout }}>\n            { !error && <LoadingBox loading={loading} error={error} errorMessage={errorMessage} /> }\n            {!loading && \n            <Router>\n              <TopNavSection />\n              <Switch>\n                <Route exact path='/' component={HomeView} />\n                <Route exact path='/login' component={LoginView} />\n                <Route exact path='/register' component={RegisterView} />\n                <Route path='/petition_group/' component={ () => <PetitionGroupView basePath='/petition_group/' />} />\n                <Route exact path='/add_petition_group/'  component={AddPetitionGroupView} />\n                <Route path='/add_petition/' component={ () => <AddPetitionView basePath='/add_petition/' />} />\n                <Route path='/petitions/' component={ () => <PetitionView basePath='/petitions/' />} />\n                <Route exact path='/debug/users' component={DebugUsersView} />\n              </Switch>\n            </Router>}\n          </AppContext.Provider>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}