{"version":3,"sources":["hooks/useFetchData.js","contexts/FormContext.js","components/FormControls.js","components/AddUserForm.js","components/UsersView.js","components/AddPetitionGroupForm.js","components/MiscControls.js","components/PetitionGroupsListView.js","components/AddPetitionForm.js","components/PetitionGroupView.js","components/TestVariablePaths.js","components/AddTestSignatureForm.js","components/PetitionView.js","App.js","reportWebVitals.js","index.js"],"names":["useFetchData","getUrl","postUrl","getRequestParams","useState","data","setData","loading","setLoading","error","setError","getData","useCallback","getRequestConfig","params","axios","get","then","response","useEffect","postData","newData","onResponse","post","addData","responseData","FormContext","createContext","FormErrorMessage","varName","visibleName","errors","useContext","type","className","FormTextInput","register","formParams","required","rows","placeholder","FormRadioButton","valueName","valueText","onClick","value","FormRadioButtonGroup","buttonsConfig","map","FormHiddenInput","varValue","AddUserForm","onSubmit","useForm","handleSubmit","formState","Provider","UsersView","users","addUser","user","AddGroupFormFormRadioBtnGroup","onBtnClick","AddPetitionGroupFormEmailSection","unregister","watch","customEmails","setCustomEmails","selectedRadioBtn","addCustomEmail","nextIndex","length","ce","AddPetitionGroupForm","console","log","LoadingBox","PetitionGroupsListView","groups","addGroup","petitionGroup","to","AddPetitionForm","petitionGroupId","PetitionGroupPetitionsSection","useRef","petition_group_id","current","petitions","addPetition","petition","index","PetitionGroupMembersList","members","member","PetitionGroupSummary","PetitionGroupView","basePath","useLocation","pathname","replace","group_name","TestVariablePaths","testPath","AddTestSignatureForm","btnLabel","TestSignatureUsers","onSignatureSubmit","TestSignaturesList","getSignatureParams","petition_id","signatures","addSignature","getUsersParams","uLoading","uError","userForSig","sig","filter","u","PetitionView","petitionId","App","path","exact","component","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.835b7e55.chunk.js","sourcesContent":["import { useState, useEffect, useCallback } from 'react'\nimport axios from 'axios';\n\nconst useFetchData = ({ getUrl, postUrl, getRequestParams }) => {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n\n    const getData = useCallback(() => {\n      setLoading(true);\n      setError(false);\n      const getRequestConfig = { params : getRequestParams };\n      axios.get(getUrl, getRequestConfig && getRequestConfig).then((response) => {\n        setData(response.data);\n        setLoading(false);\n      }, (error) => {\n        setLoading(false);\n        setError(true);\n      });\n    }, [getUrl, getRequestParams])\n\n    useEffect(() => {\n      getData();\n    },[getData]);\n\n    const addData = (newData) => {\n      postData(newData, (responseData) => {\n        setData([...data, responseData]);\n      });\n    };\n\n    const postData = (newData, onResponse) => {\n      setLoading(true);\n      setError(false);\n      axios.post(postUrl, newData).then((response) => {\n        setLoading(false);\n        onResponse(response.data)\n      }, (error) => {\n        setLoading(false);\n        setError(true);\n      });\n    }\n\n    return { data, getData, postData, addData, loading, error };\n}\n\nexport default useFetchData\n","import { createContext } from 'react';\n\nexport const FormContext = createContext({});","import { useContext } from 'react';\nimport { FormContext } from '../contexts/FormContext';\n\nconst FormErrorMessage = ({ varName, visibleName }) => {\n    const { errors } = useContext(FormContext);\n    const errorPresent = errors[varName] != null;\n    const requiredError = errorPresent && errors[varName].type === 'required';\n    return requiredError ? (<span className='form_error_message'>{visibleName} required!</span>) : (<span></span>);\n};\n\nconst FormTextInput = ({ varName, visibleName, type }) => {\n    const { register } = useContext(FormContext);\n    const formParams = { required: true};\n\n    return (\n        <>\n            {   \n                type === 'textarea' ? \n                <textarea rows='10' className=\"form_text_area\" placeholder={visibleName} {...register(varName, formParams)} /> :\n                <input className=\"form_text_input\"  type={type} placeholder={visibleName} {...register(varName, formParams)} />\n            }\n            <FormErrorMessage varName={varName} visibleName={visibleName} />\n        </>\n    );\n};\n\nconst FormRadioButton = ({ varName, valueName, valueText, onClick }) => {\n    const { register } = useContext(FormContext);\n    return (\n        <label className=\"form_checkbox_container\">\n            <input {...register(varName, { required: true })} type=\"radio\" value={valueName} onClick={() => { onClick(valueName);}} />{valueText}\n            <span className=\"checkmark\"></span>\n        </label>\n    );\n};\n\nconst FormRadioButtonGroup = ({ varName, visibleName, buttonsConfig, onClick }) => {\n    return (\n        <fieldset className=\"form_radio_button_set\">\n        { buttonsConfig.map(({ valueName, valueText}) => (\n            <FormRadioButton key={valueName} varName={varName} valueName={valueName} valueText={valueText} onClick={onClick}/>\n        )) }\n        <FormErrorMessage varName={varName} visibleName={visibleName} />\n    </fieldset>\n    )\n};\n\nconst FormHiddenInput = ({ varName, varValue }) => {\n    const { register } = useContext(FormContext);\n    return (<input type=\"hidden\" value={varValue} {...register(varName)} />);\n};\n\nexport { FormErrorMessage, FormTextInput, FormRadioButton, FormRadioButtonGroup, FormHiddenInput };","import { useForm } from 'react-hook-form';\nimport { FormTextInput } from './FormControls';\nimport { FormContext } from '../contexts/FormContext';\n\nconst AddUserForm = ({ onSubmit }) => {\n    const { register, handleSubmit, formState: { errors } } = useForm();\n    const onSubmitClick = (data) => {\n        onSubmit(data);\n    };\n\n    return (\n        <form className=\"input_form\" onSubmit={handleSubmit(onSubmitClick)}>\n            <FormContext.Provider value={{ register, errors }}>\n                <FormTextInput type='email' varName='email' visibleName='email' />\n                <FormTextInput type='password' varName='password' visibleName='password' />\n                <FormTextInput type='text' varName='first_name' visibleName='first name' />\n                <FormTextInput type='text' varName='last_name' visibleName='last name' />\n            </FormContext.Provider>\n            <input className=\"form_submit_btn\" type=\"submit\" value=\"Add New User\"/>\n        </form>\n    );\n}\n\nexport default AddUserForm;\n","import useFetchData from  '../hooks/useFetchData';\nimport AddUserForm from './AddUserForm';\n\nconst UsersView = () => {\n  const { data:users, addData:addUser, loading, error } = useFetchData({ getUrl:'/api/users', postUrl:'/api/users'});  \n\n  return (\n      <section>\n        <h2>Users</h2>\n        <AddUserForm onSubmit={addUser}/>\n        { (loading || error) &&\n        <div className=\"loading_box\">\n          {loading && <p>Loading...</p>}\n          {error && <p>error: can't connect to server.</p>}\n        </div>\n        }\n\n        <ul className='users_list_group'>\n          { users && users.map((user) => \n              <li key={user['id']} className='users_list_item'>id:{user['id']} | {user['email']}<br/>{user['first_name']} {user['last_name']}</li>\n          )}\n        </ul>\n      </section>\n  );\n}\n\nexport default UsersView\n","import { useState, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormTextInput, FormRadioButtonGroup } from './FormControls';\nimport { FormContext } from '../contexts/FormContext';\n\nconst AddGroupFormFormRadioBtnGroup = ({ onBtnClick }) => {\n    const radioButtonsConfig = [\n        { valueName: 'listserv', valueText: 'Send petition to a single mailing list' },\n        { valueName: 'custom_emails', valueText: 'Send petition to a list of email addresses' }\n    ];\n\n    return (\n        <FormRadioButtonGroup \n            varName='email_type' \n            visibleName='email notification type' \n            buttonsConfig={radioButtonsConfig}\n            onClick={onBtnClick}\n        />\n    );\n};\n\nconst AddPetitionGroupFormEmailSection = () => {\n    const { unregister, watch } = useContext(FormContext);\n    const [customEmails, setCustomEmails] = useState([]);\n    const selectedRadioBtn = watch(\"email_type\");\n\n    const addCustomEmail = () => {\n        const nextIndex = `custom_email_${customEmails.length}`;\n        setCustomEmails([...customEmails, nextIndex]);\n    };\n\n    const onEmailTypeClick = (valueName) => {\n        if(valueName === 'listserv') {\n            unregister(customEmails);\n            setCustomEmails([]);\n        }\n        else if(valueName === 'custom_emails') {\n            unregister(['listserv_email']);\n            if(customEmails.length < 1) {\n                addCustomEmail();\n            }\n        }\n    };\n\n    return (\n        <fieldset className='notification_emails_section'>\n            <AddGroupFormFormRadioBtnGroup onBtnClick={onEmailTypeClick} />\n            { selectedRadioBtn === 'custom_emails' && (    \n            <fieldset className='notification_emails_section'>\n                { customEmails.map((ce) => (<FormTextInput key={ce} type='email' varName={ce} visibleName={ce} />)) }\n                <input className=\"add_email_button\" type=\"button\" onClick={addCustomEmail} value=\"Add Another Email\"/>\n            </fieldset>)}\n            \n            {selectedRadioBtn === 'listserv' && (\n            <fieldset className='notification_emails_section'>\n                <FormTextInput type='email' varName='listserv_email' visibleName='mailing list email' />\n            </fieldset>)}\n        </fieldset>\n    );\n};\n\nconst AddPetitionGroupForm = ({ onSubmit }) => {\n    const { register, unregister, handleSubmit, formState: { errors }, watch } = useForm();\n    const onSubmitClick = (data) => {\n        console.log(data);\n        onSubmit(data);\n    };\n\n    return (\n        <form className=\"input_form\" onSubmit={handleSubmit(onSubmitClick)}>\n            <FormContext.Provider value={{ register, unregister, watch, errors }}>\n                <FormTextInput type='text' varName='group_name' visibleName='group name' />\n                <AddPetitionGroupFormEmailSection />\n            </FormContext.Provider>\n            <input className=\"form_submit_btn\" type=\"submit\" value=\"Create New Petition Group\"/>\n        </form>\n    );\n}\n\nexport default AddPetitionGroupForm;\n","const SimpleButton = ({ id, text, onBtnClick }) => {\n    const onClick = () => {\n        onBtnClick(id, text);\n    }\n\n    return (<input type=\"button\" className='simple_btn' onClick={onClick} value={text} />);\n}\n\nconst LoadingBox = ({ loading, error }) => {\n    return (\n        <>\n        { \n            (loading || error) &&\n            <div className=\"loading_box\">\n            {loading && <p>Loading...</p>}\n            {error && <p>error: can't connect to server.</p>}\n            </div>\n        }\n        </>\n    );\n};\n\nexport { SimpleButton, LoadingBox };","import useFetchData from  '../hooks/useFetchData'\nimport AddPetitionGroupForm from './AddPetitionGroupForm';\nimport { LoadingBox } from './MiscControls';\nimport { Link } from 'react-router-dom';\n\nconst PetitionGroupsListView = () => {\n  const { data:groups, addData:addGroup, loading, error } = useFetchData({ getUrl:'/api/petition_groups', postUrl:'/api/petition_groups'});\n  \n  return (\n      <section>\n        <h2>Petition Groups</h2>\n        <AddPetitionGroupForm onSubmit={addGroup}/>\n        <LoadingBox loading={loading} error={error} />\n        <ul className='petition_groups_list_group'>\n        {groups && groups.map((petitionGroup) => \n          <li className='petition_groups_list_item' key={petitionGroup['id']}>\n            <Link className='petition_groups_list_btn' to={`/petition_group/${petitionGroup['id']}`}>View</Link>\n            <span>id:{petitionGroup['id']}</span>\n            <span>{petitionGroup['group_name']}</span>\n          </li>)}\n        </ul>\n      </section>\n  );\n}\n\nexport default PetitionGroupsListView\n","import { useForm } from 'react-hook-form';\nimport { FormTextInput, FormHiddenInput } from './FormControls';\nimport { FormContext } from '../contexts/FormContext';\n\nconst AddPetitionForm = ({ onSubmit, petitionGroupId }) => {\n    const { register, unregister, handleSubmit, formState: { errors }, watch } = useForm();\n    const onSubmitClick = (data) => {\n        console.log(data);\n        onSubmit(data);\n    };\n\n    return (\n        <form className=\"input_form\" onSubmit={handleSubmit(onSubmitClick)}>\n            <FormContext.Provider value={{ register, unregister, watch, errors }}>\n                <FormTextInput type='text' varName='subject' visibleName='subject' />\n                <FormTextInput type='textarea' varName='petition_text' visibleName='petition text' />\n                <FormHiddenInput varName='petition_group_id' varValue={petitionGroupId} />\n            </FormContext.Provider>\n            <input className=\"form_submit_btn\" type=\"submit\" value=\"Add New Petition\"/>\n        </form>\n    );\n}\n\nexport default AddPetitionForm;\n","import { useLocation, Link } from 'react-router-dom';\nimport useFetchData from  '../hooks/useFetchData'\nimport { LoadingBox } from './MiscControls';\nimport AddPetitionForm from './AddPetitionForm';\nimport { useRef } from 'react';\n\nconst PetitionGroupPetitionsSection = ({ petitionGroupId }) => {\n    const getRequestParams = useRef({ petition_group_id : petitionGroupId });\n    const { data:petitions, addData:addPetition, loading, error } = useFetchData({ \n        getUrl:'/api/petitions', postUrl:'/api/petitions', getRequestParams:getRequestParams.current \n    });\n    \n    return (\n      <>\n      <br/><strong>Petitions</strong>\n      <LoadingBox loading={loading} error={error} />\n      <AddPetitionForm petitionGroupId={petitionGroupId} onSubmit={addPetition} />\n      <ul className='petitions_list_group'>\n      { (petitions && petitions.length > 0) ? petitions.map((petition, index) => \n        <li className='petitions_list_item' key={index}>\n            <Link className='petitions_list_btn' to={`/petitions/${petition['id']}`}>View</Link>\n            <span>Subject: {petition['subject']}</span>\n        </li>) : \n        <p>This group has no petition yet.</p>\n      }\n      </ul>\n      </>\n    );\n};\n\nconst PetitionGroupMembersList = ({ petitionGroupId }) => {\n    const getRequestParams = useRef({ petition_group_id : petitionGroupId });\n    const { data:members, loading, error } = useFetchData({ getUrl:'/api/members', getRequestParams:getRequestParams.current });\n    \n    return (\n      <>\n      <br/><strong>Members</strong>\n      <LoadingBox loading={loading} error={error} />\n      <ul className='users_list_group'>\n      { (members && members.length > 0) ? members.map((member) => \n        <li className='users_list_item' key={member['email']}>{member['email']}</li>) : \n        <p>This group has no members yet.</p>\n      }\n      </ul>\n      </>\n    );\n};\n  \nconst PetitionGroupSummary = ({ petitionGroup }) => {\nreturn (\n    <p>\n        <strong>id:</strong> {petitionGroup['id']}<br/>\n        <strong>listserv_email:</strong> {petitionGroup['listserv_email']}<br/>\n    </p>\n    );\n};\n\nconst PetitionGroupView = ({ basePath }) => {\n    const location = useLocation();\n    const petitionGroupId = location.pathname.replace(basePath, '');\n    const { data:petitionGroup, loading, error } = useFetchData({ getUrl:`/api/petition_groups/${petitionGroupId}` });\n\n    return (\n        <section>\n            <LoadingBox loading={loading} error={error} />\n            { petitionGroup && (<>\n            <h2>Petition Group: {petitionGroup.group_name}</h2>\n            <PetitionGroupSummary petitionGroup={petitionGroup} />\n            <PetitionGroupMembersList petitionGroupId={petitionGroupId} />\n            <PetitionGroupPetitionsSection petitionGroupId={petitionGroup['id']} /></>) }\n        </section>\n    );\n}\n\nexport default PetitionGroupView;","import { useLocation } from 'react-router-dom';\n\nconst TestVariablePaths = ({basePath}) => {\n    const location = useLocation();\n    const testPath = location.pathname.replace(basePath, '');\n\n    return (\n        <section>\n            <h3>Testing Variable Paths</h3>\n            <p>subpath: {testPath} </p>\n        </section>\n    );\n}\n\nexport default TestVariablePaths;","import { useForm } from 'react-hook-form';\nimport { FormTextInput, FormHiddenInput } from './FormControls';\nimport { FormContext } from '../contexts/FormContext';\n\nconst AddTestSignatureForm = ({ onSubmit, petition, user }) => {\n    const { register, unregister, handleSubmit, formState: { errors }, watch } = useForm();\n    const onSubmitClick = (data) => {\n        onSubmit(data);\n    };\n\n    const btnLabel = `Sign Petition as ${user['email']}`;\n\n    return (\n        <form className=\"input_form\" onSubmit={handleSubmit(onSubmitClick)}>\n            <FormContext.Provider value={{ register, unregister, watch, errors }}>\n                <FormTextInput type='number' varName='reveal_threshold' visibleName='reveal threshold' />\n                <FormHiddenInput varName='petition_id' varValue={petition['id']} />\n                <FormHiddenInput varName='user_id' varValue={user['id']} />\n            </FormContext.Provider>\n            <input className=\"form_submit_btn\" type=\"submit\" value={btnLabel}/>\n        </form>\n    );\n}\n\nexport default AddTestSignatureForm;\n","import { useLocation } from 'react-router-dom';\nimport useFetchData from  '../hooks/useFetchData'\nimport { LoadingBox } from './MiscControls';\nimport AddTestSignatureForm from './AddTestSignatureForm';\nimport { useRef } from 'react';\n\nconst TestSignatureUsers = ({ petition, onSignatureSubmit, users, loading, error }) => {\n    return (\n        <section>\n            <LoadingBox loading={loading} error={error} />\n            { users && <>\n                <h4>Users Who Can Sign</h4>\n                <ul className='test_signature_user_group'>\n                { users && users.map((user) => \n                    <li key={user['id']} className='users_list_item test_signature_user_box'>\n                        <p>id:{user['id']} | {user['email']} | {user['first_name']} {user['last_name']}</p>\n                        <AddTestSignatureForm onSubmit={onSignatureSubmit} petition={petition} user={user}/>\n                    </li>\n                )}\n                { users && users.length < 1 && <li>No users can sign this petition.</li>}\n                </ul>\n            </>}\n        </section>\n    );\n}\n\nconst TestSignaturesList = ({ petition }) => {\n    const getSignatureParams = useRef({ petition_id : petition['id'] });\n    const { data:signatures, addData:addSignature, loading, error } = useFetchData({ \n        getUrl:'/api/signatures', \n        getRequestParams:getSignatureParams.current,\n        postUrl:'/api/signatures'\n    });\n\n    const getUsersParams = useRef(petition ? { petition_group_id : petition['petition_group_id'] } : {});\n    const { data:users, uLoading, uError } = useFetchData({ \n        getUrl:'/api/users', getRequestParams:getUsersParams.current \n    });\n\n    const onSignatureSubmit = (data) => {\n        console.log(\"onSignatureSubmit\");\n        console.log(data);\n        addSignature(data);\n    }\n\n    const userForSig = (sig) => {\n        return users.filter(u => u['id'] == sig['user_id'])[0];\n    }   \n\n    return (\n        <section>\n            <LoadingBox loading={loading} error={error} />\n            { signatures && <>\n                <h4>Signatures</h4>\n                <ul className='test_signature_user_group'>\n                { (signatures && users) && signatures.map((sig) => \n                    <li key={sig['id']} className='users_list_item test_signature_user_box'>\n                        <span>id:{sig['id']}</span>\n                        <span>petition_id:{sig['petition_id']}</span>\n                        <span>user_id:{sig['user_id']}</span>\n                        <span>reveal_threshold:{sig['reveal_threshold']}</span>\n                        <span>email:{userForSig(sig)['email']}</span>\n                    </li>\n                )}\n                { signatures && signatures.length < 1 && <li>Nobody has signed this petition.</li>}\n                </ul>\n                <TestSignatureUsers petition={petition} onSignatureSubmit={onSignatureSubmit} users={users} loading={uLoading} error={uError} />\n            </>}\n        </section>\n    );\n}\n\nconst PetitionView = ({ basePath }) => {\n    const location = useLocation();\n    const petitionId = location.pathname.replace(basePath, '');\n    const { data:petition, loading, error } = useFetchData({ getUrl:`/api/petitions/${petitionId}` });\n\n    return (\n        <section>\n            <LoadingBox loading={loading} error={error} />\n            {petition && <>\n                <h2>Petition: {petition['subject']}</h2>\n                <p>Petition Text: {petition['petition_text']}</p>\n                <TestSignaturesList petition={petition}/>\n            </>}\n        </section>\n    );\n}\n\nexport default PetitionView;","import './App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport UsersView from './components/UsersView';\nimport PetitionGroupsListView from './components/PetitionGroupsListView'\nimport PetitionGroupView from './components/PetitionGroupView'\nimport TestVariablePaths from './components/TestVariablePaths'\nimport PetitionView from './components/PetitionView'\n\nconst App = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n      <h1>Petition App Debug UI</h1>\n      <nav className='top_nav'>\n        <Link className='nav_link' to='/users'>Users</Link>\n        <Link className='nav_link' to='/petition_groups'>Petition Groups</Link>\n      </nav>\n      \n      <Route path='/petition_groups' exact component={PetitionGroupsListView} />\n      <Route path='/petition_group/' render={ () => (<PetitionGroupView basePath='/petition_group/' />)} />\n      <Route path='/petitions/' render={ () => (<PetitionView basePath='/petitions/' />)} />\n      <Route path='/users' exact component={UsersView} />\n      <Route path='/testpath/' render={ () => (<TestVariablePaths basePath='/testpath/' />)} />\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}