{"version":3,"sources":["components/FormTextInput.js","components/TextEntryForm.js","hooks/useFetchData.js","common/FormFieldInfo.js","components/UsersView.js","components/PetitionsView.js","App.js","reportWebVitals.js","index.js"],"names":["FormTextInput","index","fieldInfo","setText","inputType","className","cols","rows","placeholder","value","onChange","e","target","type","defaultProps","placeholderText","isPassword","TextEntryForm","formFields","submitBtnLabel","submitEvent","useState","formData","setFormData","onTextUpdate","newValue","newFormData","onSubmit","preventDefault","invalidEntires","filter","entry","isValid","length","alert","name","submitData","forEach","fd","map","field","useFetchData","getUrl","addUrl","data","setData","loading","setLoading","useEffect","getData","fetch","then","res","json","resData","newData","method","headers","body","JSON","stringify","console","log","FormFieldInfo","this","ffi","UsersView","users","addUser","addUserFormFields","user","PetitionsView","petitions","addPetition","petition","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3cf4fe5.chunk.js","sourcesContent":["const FormTextInput = ({index, fieldInfo, setText}) => {\n  const isTextArea = fieldInfo.inputType == 'text_area';\n\n  const standardTextInput = () => { \n    return (\n      <input\n        className=\"form_text_input\" \n        type={fieldInfo.inputType}\n        placeholder={fieldInfo.placeholder} \n        value={fieldInfo.value} \n        onChange={ (e) => setText(index, e.target.value) }\n      />\n    )\n  } \n\n  const textAreaInput = () => { \n    return (\n      <textarea\n        className=\"form_text_area\" \n        cols=\"30\" \n        rows=\"10\"\n        placeholder={fieldInfo.placeholder} \n        value={fieldInfo.value} \n        onChange={ (e) => setText(index, e.target.value) }\n      />\n    )\n  } \n\n  return isTextArea ? textAreaInput() : standardTextInput();\n}\n\n  FormTextInput.defaultProps = {\n    placeholderText: 'Type Something',\n    isPassword: false\n  }\n\n  export default FormTextInput","import { useState } from 'react'\nimport FormTextInput from './FormTextInput'\n\nconst TextEntryForm = ({ formFields, submitBtnLabel, submitEvent  }) => {\n  const [formData, setFormData] = useState(formFields);\n\n  const onTextUpdate = (index, newValue) => {\n    const newFormData = [...formData];\n    newFormData[index] = {...newFormData[index], value:newValue};\n    setFormData(newFormData);\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const invalidEntires = formData.filter(entry => !entry.isValid(entry));\n    if(invalidEntires.length > 0){\n      alert(`enter a ${invalidEntires[0].name}`);\n      return;\n    }\n\n    let submitData = {};\n    formData.forEach(fd => submitData[fd.name] = fd.value);\n    submitEvent(submitData);\n    setFormData(formFields);\n  }\n\n  return (\n    <form onSubmit={onSubmit} className='input_form'>\n      {formData.map((field, index) => <FormTextInput key={index} index={index} fieldInfo={field} setText={onTextUpdate}/>)}\n      <input type=\"submit\" value={submitBtnLabel} className=\"form_submit_btn\" />\n    </form>\n  )\n}\n\nexport default TextEntryForm","import { useState, useEffect } from 'react'\n\nconst useFetchData = (getUrl, addUrl) => {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => { \n      getData(); \n    }, []);\n\n    const getData = () => {\n        setLoading(true);\n        fetch(getUrl)\n        .then(res => res.json())\n        .then(resData => {\n            setData(resData);\n            setLoading(false);\n        });\n    };\n\n    const addData = (newData) => {\n      setLoading(true);\n      fetch(addUrl, {\n        method: 'POST',\n        headers: { \n          'Content-type' : 'application/json' \n        },\n        body: JSON.stringify(newData)\n      }).then(res => { \n        return res.json(); \n      }).then(newData => {\n        console.log(newData);\n        setData([...data, newData]);\n        setLoading(false);\n      });\n    };\n\n    return [ data, getData, addData, loading ];\n}\n\nexport default useFetchData\n","function FormFieldInfo({name='name', inputType='text', value='', placeholder=null, isValid=null}) {\n    this.name = name;\n    this.value = value;\n    this.placeholder = placeholder ? placeholder : name;\n    this.inputType = inputType;\n    this.isValid = isValid ? isValid : (ffi) => {\n      console.log(ffi.name + ': ' + ffi.value);\n      return ffi.value !== ''; \n    };\n};\n\nexport default FormFieldInfo","\n import TextEntryForm from './TextEntryForm'\n import useFetchData from  '../hooks/useFetchData'\n import FormFieldInfo from '../common/FormFieldInfo'\n\n const UsersView = () => {\n    const [ users, getUsers, addUser, loading ] = useFetchData('/api/get_users', '/api/add_user');\n  \n    const addUserFormFields = [\n      new FormFieldInfo({name:'username'}),\n      new FormFieldInfo({name:'password', inputType: 'password'})\n    ];\n  \n    return (\n        <section>\n          <h2>Users</h2>\n          <TextEntryForm formFields={addUserFormFields} submitBtnLabel='Add User' submitEvent={addUser}/>\n          <div className=\"loading_box\">\n            {loading && <p>Loading...</p>}\n          </div>\n          <ul>\n            { users && users.map((user) => \n                <li key={user['id']}> <strong>id:</strong> {user['id']} <strong>username:</strong> {user['name']}></li>\n            )}\n          </ul>\n        </section>\n    );\n  }\n\nexport default UsersView\n","\n import TextEntryForm from './TextEntryForm'\n import useFetchData from  '../hooks/useFetchData'\n import FormFieldInfo from '../common/FormFieldInfo'\n\n const PetitionsView = () => {\n    const [ petitions, getPetitions, addPetition, loading ] = useFetchData('/api/get_petitions', '/api/add_petition');\n  \n    const addUserFormFields = [\n      new FormFieldInfo({name:'text', inputType: 'text_area', placeholder: 'petition text...'}),\n      new FormFieldInfo({name:'email_domain', placeholder: 'email domain'}),\n      new FormFieldInfo({name:'max_users', inputType: 'number', placeholder: 'max users for this petition'})\n    ];\n  \n    return (\n        <section>\n          <h2>Petitions</h2>\n          <TextEntryForm formFields={addUserFormFields} submitBtnLabel='Add Petition' submitEvent={addPetition}/>\n          <div className=\"loading_box\">\n            {loading && <p>Loading...</p>}\n          </div>\n\n          <ul>\n          {petitions && petitions.map((petition) => \n            <li \n                key={petition['id']}>\n                <strong>id:</strong> {petition['id']}<br/>\n                <strong>email_domain:</strong> {petition['email_domain']}<br/>\n                <strong>max_users:</strong> {petition['max_users']}<br/>\n                <strong>text:</strong> {petition['text']}\n            </li>)}\n          </ul>\n        </section>\n    );\n  }\n\nexport default PetitionsView\n","import './App.css';\nimport UsersView from './components/UsersView'\nimport PetitionsView from './components/PetitionsView'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Petition App Debug UI</h1>\n      <PetitionsView />\n      <UsersView />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}