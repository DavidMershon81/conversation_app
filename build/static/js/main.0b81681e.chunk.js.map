{"version":3,"sources":["hooks/useGetData.js","components/MiscControls.js","components/DebugUsersView.js","contexts/AppContext.js","components/PetitionGroupView.js","hooks/usePostData.js","contexts/FormContext.js","components/FormControls.js","components/AddPetitionGroupForm.js","components/AddPetitionGroupView.js","components/AddPetitionForm.js","components/AddPetitionView.js","components/SignPetitionForm.js","components/SignPetitionSection.js","components/PetitionView.js","hooks/useLogin.js","components/LoginForm.js","components/LoginView.js","components/RegisterUserForm.js","components/RegisterView.js","components/HomeView.js","components/TopNavSection.js","hooks/useGetAuthData.js","components/MainAppRouter.js","App.js","reportWebVitals.js","index.js"],"names":["getDataFromApi","url","params","logout","a","Error","axios","get","data","response","message","useGetData","checkRetry","useQuery","retry","failureCount","error","refetch","isLoading","isError","getData","loading","errorMessage","SimpleButton","id","text","onBtnClick","className","type","onClick","LoadingBox","DebugUsersView","users","map","user","AppContext","createContext","PetitionGroupPetitionsSection","petitionGroupId","requestParams","useRef","petition_group_id","current","petitions","length","petition","index","to","PetitionGroupMembersSection","members","useState","showMembers","setShowMembers","showMembersBtnText","member","PetitionGroupSummary","petitionGroup","PetitionGroupView","basePath","loggedIn","useContext","useLocation","pathname","replace","group_name","usePostData","onConfirm","confirmText","postData","dataToPost","post","useMutation","mutate","isSuccess","confirmMessage","useEffect","responseData","FormContext","FormErrorMessage","varName","visibleName","validateErrorMessage","errors","errorPresent","requiredError","validateError","FormTextInput","validateFunction","register","formParams","required","validate","rows","placeholder","FormRadioButton","valueName","valueText","value","FormRadioButtonGroup","buttonsConfig","FormHiddenInput","varValue","AddGroupFormFormRadioBtnGroup","AddPetitionGroupFormEmailSection","unregister","watch","customEmails","setCustomEmails","selectedRadioBtn","addCustomEmail","nextIndex","ce","AddPetitionGroupForm","onSubmit","useForm","handleSubmit","formState","console","log","Provider","AddPetitionGroupView","history","useHistory","push","postGroup","AddPetitionForm","AddPetitionView","location","postPetition","SignPetitionForm","SignPetitionSection","postSignature","SignaturesList","petition_id","sigData","getSignatures","userSignedData","getUserSigned","usLoading","usError","usErrorMessage","show_sign_form","revealed_signatures","rs","unrevealed_signatures","us","PetitionView","petitionId","useLogin","onLoginSuccess","username","password","auth","res","tryLogin","success","LoginForm","LoginView","refreshAuth","formData","email","RegisterUserForm","getValues","RegisterView","postUser","HomeView","groups","TopNavSection","authData","setLogout","loggedInUser","user_email","useGetAuthData","getAuthData","MainRouterSwitch","exact","path","component","MainAppRouter","initialIsOpen","App","queryClient","QueryClient","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b81681e.chunk.js","sourcesContent":["import { useQuery } from 'react-query';\nimport axios from 'axios';\n\nconst getDataFromApi = async (url, params, logout) => {    \n    if(logout) {\n        throw new Error('Not logged in!');\n    }\n    \n    try {\n        return (await axios.get(url, { 'params' : params })).data;\n    } catch (error) {\n        throw new Error(error.response.data.message);\n    }\n}\n\nconst useGetData = ({ url, params, logout=false, checkRetry = () => true }) => {\n    const onRetry = (failureCount, error) => {\n        return checkRetry(error.message);\n    }\n\n    const { data, refetch, isLoading, isError, error } = useQuery([url, url, params, logout], () => getDataFromApi(url, params, logout), { retry:onRetry });\n    const errorMessage = error ? error.message : \"\";\n    return { data, getData:refetch, loading:isLoading, error:isError, errorMessage:errorMessage };\n}\n\nexport default useGetData;\n","const SimpleButton = ({ id, text, onBtnClick, className }) => {\n    const onClick = () => {\n        onBtnClick(id, text);\n    }\n\n    return (<button className={className} type=\"button\" onClick={onClick}>{text}</button>);\n}\n\nconst LoadingBox = ({ loading, error, errorMessage }) => {\n    return (\n        <>\n        { \n            (loading || error) &&\n            <div className=\"loading_box\">\n            {loading && <p>Loading...</p>}\n            {error && <p>error: {errorMessage}</p>}\n            </div>\n        }\n        </>\n    );\n};\n\nexport { SimpleButton, LoadingBox };","import useGetData from  '../hooks/useGetData';\nimport { LoadingBox } from './MiscControls';\n\nconst DebugUsersView = () => {\n  const { data:users, loading, error, errorMessage } = useGetData({ \n    url:'/api/users'\n  });\n\n  return (\n      <section>\n        <h2>Users (Debug View)</h2>\n        <p>This page shows all of the users in the app.</p>\n        <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n        <ul className='users_list_group'>\n          { users && users.map((user) => \n              <li key={user['id']} className='users_list_item'>id:{user['id']} | {user['email']}<br/>{user['first_name']} {user['last_name']}</li>\n          )}\n        </ul>\n      </section>\n  );\n}\n\nexport default DebugUsersView;","import { createContext } from 'react';\n\nexport const AppContext = createContext({});","import { useLocation, Link, Redirect } from 'react-router-dom';\nimport useGetData from  '../hooks/useGetData'\nimport { LoadingBox, SimpleButton } from './MiscControls';\nimport { useRef, useContext, useState } from 'react';\nimport { AppContext } from '../contexts/AppContext';\n\nconst PetitionGroupPetitionsSection = ({ petitionGroupId }) => {\n  const requestParams = useRef({ petition_group_id : petitionGroupId });\n  const { data:petitions, loading, error, errorMessage } = useGetData({ \n      url:'/api/petitions',\n      params:requestParams.current\n  });\n    \n  return (\n    <section className='petition_group_section'>\n    <strong>Petitions</strong>\n    <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n    <ul className='petitions_list_group'>\n    { (petitions && petitions.length > 0) ? petitions.map((petition, index) => \n      <li className='petitions_list_item' key={index}>\n          <Link className='petitions_list_btn' to={`/petitions/${petition['id']}`}>View</Link>\n          <span>Subject: {petition['subject']}</span>\n      </li>) : \n      <p>This group has no petition yet.</p>\n    }\n    </ul>\n      {petitions && <div className='add_petition_group_btn'>\n        <Link className='add_petition_btn_text' to={`/add_petition/${petitionGroupId}`}>Add New Petition</Link>\n      </div>}\n    </section>\n  );\n};\n\nconst PetitionGroupMembersSection = ({ petitionGroupId }) => {\n  const requestParams = useRef({ petition_group_id : petitionGroupId });\n  const { data:members, loading, error, errorMessage } = useGetData({ \n      url:'/api/members',\n      params:requestParams.current,\n  });\n\n  const [showMembers, setShowMembers] = useState(false);\n  const showMembersBtnText = showMembers ? 'Hide' : 'Show';\n\n  const onToggleMembers = (id, text) => {\n    setShowMembers(!showMembers);\n  };\n\n  return (\n    <section className='petition_group_section'>\n      <strong>Members</strong>\n      <SimpleButton className='full_width_btn' onBtnClick={onToggleMembers} text={showMembersBtnText}/>\n      <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n      {showMembers && <ul className='users_list_group'>\n      { (members && members.length > 0) ? members.map((member) => \n        <li className='users_list_item' key={member['email']}>{member['email']}</li>) : \n        <p>This group has no members yet.</p>\n      }\n      </ul>}\n    </section>\n  );\n};\n  \nconst PetitionGroupSummary = ({ petitionGroup }) => {\nreturn (\n    <p>\n        <strong>id:</strong> {petitionGroup['id']}<br/>\n        <strong>listserv_email:</strong> {petitionGroup['listserv_email']}<br/>\n    </p>\n    );\n};\n\nconst PetitionGroupView = ({ basePath }) => {\n  const { loggedIn } = useContext(AppContext);\n  const location = useLocation();\n  const petitionGroupId = location.pathname.replace(basePath, '');\n  const { data:petitionGroup, loading, error, errorMessage } = useGetData({ \n    url:`/api/petition_groups/${petitionGroupId}`\n  });\n\n  if(!loggedIn) {\n    return <Redirect to='/login' />\n  }\n  return (\n      <section className='petition_group_view'>\n          <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n          { petitionGroup && (<>\n          <h2>Petition Group: {petitionGroup.group_name}</h2>\n          <PetitionGroupSummary petitionGroup={petitionGroup} />\n          <PetitionGroupMembersSection petitionGroupId={petitionGroupId} />\n          <PetitionGroupPetitionsSection petitionGroupId={petitionGroup['id']} /></>) }\n      </section>\n  );\n}\n\nexport default PetitionGroupView;","import { useEffect } from 'react'\nimport axios from 'axios';\nimport { useMutation } from 'react-query';\n\nconst usePostData = ({ url, onConfirm, confirmText }) => {\n    const postData = async (dataToPost) => {\n        try {\n            return (await axios.post(url, dataToPost)).data;\n        }catch (error) {\n            throw new Error(error.response.data.message);\n        }\n    }\n    const { mutate, data, isLoading, isError, error, isSuccess } = useMutation(postData);\n    const confirmMessage = isSuccess ? confirmText : null;\n\n    useEffect(() => {\n        if(isSuccess && onConfirm) {\n            onConfirm(data);\n        }\n    }, [onConfirm, isSuccess])\n\n    const errorMessage = error ? error.message : \"\";\n    return { post:mutate, responseData:data, loading:isLoading, error:isError, confirmMessage, errorMessage:errorMessage  };\n}\n\nexport default usePostData;\n","import { createContext } from 'react';\n\nexport const FormContext = createContext({});","import { useContext } from 'react';\nimport { FormContext } from '../contexts/FormContext';\n\nconst FormErrorMessage = ({ varName, visibleName, validateErrorMessage }) => {\n    const { errors } = useContext(FormContext);\n    const errorPresent = errors[varName] != null;\n    const requiredError = errorPresent && errors[varName].type === 'required';\n    const validateError = errorPresent && errors[varName].type === 'validate';\n\n    if(requiredError || validateError) {\n        const errorMessage = validateError ? validateErrorMessage :`${visibleName} required!`;\n        return (<span className='form_error_message'>{errorMessage}</span>);\n    }\n    return (<span></span>);\n};\n\nconst FormTextInput = ({ varName, visibleName, type, validateFunction=()=> { return true; }, validateErrorMessage }) => {\n    const { register } = useContext(FormContext);\n    const formParams = { \n        required: true,\n        validate: validateFunction\n    };\n\n    return (\n        <>\n            {   \n                type === 'textarea' ? \n                <textarea rows='10' className=\"form_text_area\" placeholder={visibleName} {...register(varName, formParams)} /> :\n                <input className=\"form_text_input\"  type={type} placeholder={visibleName} {...register(varName, formParams)} />\n            }\n            <FormErrorMessage varName={varName} visibleName={visibleName} validateErrorMessage={validateErrorMessage}/>\n        </>\n    );\n};\n\nconst FormRadioButton = ({ varName, valueName, valueText, onClick }) => {\n    const { register } = useContext(FormContext);\n    return (\n        <label className=\"form_checkbox_container\">\n            <input {...register(varName, { required: true })} type=\"radio\" value={valueName} onClick={() => { onClick(valueName);}} />{valueText}\n            <span className=\"checkmark\"></span>\n        </label>\n    );\n};\n\nconst FormRadioButtonGroup = ({ varName, visibleName, buttonsConfig, onClick }) => {\n    return (\n        <fieldset className=\"form_radio_button_set\">\n        { buttonsConfig.map(({ valueName, valueText}) => (\n            <FormRadioButton key={valueName} varName={varName} valueName={valueName} valueText={valueText} onClick={onClick}/>\n        )) }\n        <FormErrorMessage varName={varName} visibleName={visibleName} />\n    </fieldset>\n    )\n};\n\nconst FormHiddenInput = ({ varName, varValue }) => {\n    const { register } = useContext(FormContext);\n    return (<input type=\"hidden\" value={varValue} {...register(varName)} />);\n};\n\nexport { FormErrorMessage, FormTextInput, FormRadioButton, FormRadioButtonGroup, FormHiddenInput };","import { useState, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormTextInput, FormRadioButtonGroup } from './FormControls';\nimport { FormContext } from '../contexts/FormContext';\n\nconst AddGroupFormFormRadioBtnGroup = ({ onBtnClick }) => {\n    const radioButtonsConfig = [\n        { valueName: 'listserv', valueText: 'Send petition to a single mailing list' },\n        { valueName: 'custom_emails', valueText: 'Send petition to a list of email addresses' }\n    ];\n\n    return (\n        <FormRadioButtonGroup \n            varName='email_type' \n            visibleName='email notification type' \n            buttonsConfig={radioButtonsConfig}\n            onClick={onBtnClick}\n        />\n    );\n};\n\nconst AddPetitionGroupFormEmailSection = () => {\n    const { unregister, watch } = useContext(FormContext);\n    const [customEmails, setCustomEmails] = useState([]);\n    const selectedRadioBtn = watch(\"email_type\");\n\n    const addCustomEmail = () => {\n        const nextIndex = `custom_email_${customEmails.length}`;\n        setCustomEmails([...customEmails, nextIndex]);\n    };\n\n    const onEmailTypeClick = (valueName) => {\n        if(valueName === 'listserv') {\n            unregister(customEmails);\n            setCustomEmails([]);\n        }\n        else if(valueName === 'custom_emails') {\n            unregister(['listserv_email']);\n            if(customEmails.length < 1) {\n                addCustomEmail();\n            }\n        }\n    };\n\n    return (\n        <fieldset className='notification_emails_section'>\n            <AddGroupFormFormRadioBtnGroup onBtnClick={onEmailTypeClick} />\n            { selectedRadioBtn === 'custom_emails' && (    \n            <fieldset className='notification_emails_section'>\n                { customEmails.map((ce) => (<FormTextInput key={ce} type='email' varName={ce} visibleName={ce} />)) }\n                <input className=\"add_email_button\" type=\"button\" onClick={addCustomEmail} value=\"Add Another Email\"/>\n            </fieldset>)}\n            \n            {selectedRadioBtn === 'listserv' && (\n            <fieldset className='notification_emails_section'>\n                <FormTextInput type='email' varName='listserv_email' visibleName='mailing list email' />\n            </fieldset>)}\n        </fieldset>\n    );\n};\n\nconst AddPetitionGroupForm = ({ onSubmit }) => {\n    const { register, unregister, handleSubmit, formState: { errors }, watch } = useForm();\n    const onSubmitClick = (data) => {\n        console.log(data);\n        onSubmit(data);\n    };\n\n    return (\n        <form className=\"input_form\" onSubmit={handleSubmit(onSubmitClick)}>\n            <FormContext.Provider value={{ register, unregister, watch, errors }}>\n                <FormTextInput type='text' varName='group_name' visibleName='group name' />\n                <AddPetitionGroupFormEmailSection />\n            </FormContext.Provider>\n            <input className=\"form_submit_btn\" type=\"submit\" value=\"Create New Petition Group\"/>\n        </form>\n    );\n}\n\nexport default AddPetitionGroupForm;\n","import usePostData from '../hooks/usePostData';\nimport AddPetitionGroupForm from './AddPetitionGroupForm';\nimport { LoadingBox } from './MiscControls';\nimport { Redirect, useHistory } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { AppContext } from '../contexts/AppContext';\n\nconst AddPetitionGroupView = () => {\n    const { loggedIn } = useContext(AppContext);\n    const history = useHistory();\n    const onConfirmAddGroup = (responseData) => {\n        history.push(`/petition_group/${responseData.id}`)\n    }\n    const { post:postGroup, confirmMessage, loading, error, errorMessage } = usePostData({ \n        url:'/api/petition_groups', \n        confirmText:'Added Petition Group',\n        onConfirm:onConfirmAddGroup\n    });\n\n    if(!loggedIn) {\n        return <Redirect to='/login' />\n    }\n    return (\n        <section>\n            <h2>Add Petition Group</h2>\n            <p>Use this form to add a new petition group.</p>\n            <AddPetitionGroupForm onSubmit={postGroup}/>\n            {confirmMessage && <p>{confirmMessage}</p>}\n            <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n        </section>\n    );\n}\n\nexport default AddPetitionGroupView\n","import { useForm } from 'react-hook-form';\nimport { FormTextInput, FormHiddenInput } from './FormControls';\nimport { FormContext } from '../contexts/FormContext';\n\nconst AddPetitionForm = ({ onSubmit, petitionGroupId }) => {\n    const { register, unregister, handleSubmit, formState: { errors }, watch } = useForm();\n    const onSubmitClick = (data) => {\n        console.log(data);\n        onSubmit(data);\n    };\n\n    return (\n        <form className=\"input_form\" onSubmit={handleSubmit(onSubmitClick)}>\n            <FormContext.Provider value={{ register, unregister, watch, errors }}>\n                <FormTextInput type='text' varName='subject' visibleName='subject' />\n                <FormTextInput type='textarea' varName='petition_text' visibleName='petition text' />\n                <FormHiddenInput varName='petition_group_id' varValue={petitionGroupId} />\n            </FormContext.Provider>\n            <input className=\"form_submit_btn\" type=\"submit\" value=\"Add New Petition\"/>\n        </form>\n    );\n}\n\nexport default AddPetitionForm;\n","import usePostData from   '../hooks/usePostData';\nimport AddPetitionForm from './AddPetitionForm';\nimport { LoadingBox } from './MiscControls';\nimport { useLocation, Redirect, useHistory } from 'react-router-dom';\nimport { useContext } from 'react'\nimport { AppContext } from '../contexts/AppContext';\n\nconst AddPetitionView = ({ basePath }) => {\n    const { loggedIn } = useContext(AppContext);\n    const location = useLocation();\n    const history = useHistory();\n    const petitionGroupId = location.pathname.replace(basePath, '');\n    const onConfirmAddPetition = (responseData) => {\n        console.log(`new petition id: ${responseData.id}`);\n        history.push(`/petitions/${responseData.id}`)\n    }\n    const { post:postPetition, confirmMessage, loading, error, errorMessage } = usePostData({ \n        url:'/api/petitions', \n        confirmText:'Added New Petition',\n        onConfirm:onConfirmAddPetition\n    });\n\n    if(!loggedIn) {\n        return <Redirect to='/login' />\n    }\n    return (\n        <section>\n            <h2>Add Petition</h2>\n            <p>Use this form to add a new petition.</p>\n            <AddPetitionForm petitionGroupId={petitionGroupId} onSubmit={postPetition} />\n            {confirmMessage && <p>{confirmMessage}</p>}\n            <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n        </section>\n    );\n}\n\nexport default AddPetitionView\n","import { useForm } from 'react-hook-form';\nimport { FormTextInput, FormHiddenInput } from './FormControls';\nimport { FormContext } from '../contexts/FormContext';\n\nconst SignPetitionForm = ({ onSubmit, petition }) => {\n    const { register, unregister, handleSubmit, formState: { errors }, watch } = useForm();\n    const onSubmitClick = (data) => {\n        onSubmit(data);\n    };\n\n    return (\n        <form className=\"input_form\" onSubmit={handleSubmit(onSubmitClick)}>\n            <FormContext.Provider value={{ register, unregister, watch, errors }}>\n                <FormTextInput type='number' varName='reveal_threshold' visibleName='reveal threshold' />\n                <FormHiddenInput varName='petition_id' varValue={petition['id']} />\n            </FormContext.Provider>\n            <input className=\"form_submit_btn\" type=\"submit\" value='Sign Petition'/>\n        </form>\n    );\n}\n\nexport default SignPetitionForm;\n","import usePostData from '../hooks/usePostData';\nimport { LoadingBox } from './MiscControls';\nimport SignPetitionForm from './SignPetitionForm';\n\nconst SignPetitionSection = ({ petition, onConfirm }) => {    \n    const { post:postSignature, confirmMessage, loading, error, errorMessage } = usePostData({ \n        url:'/api/signatures', \n        onConfirm:onConfirm,\n        confirmText:'Submitted Signature'\n    });\n\n    return (\n        <section className='users_list_item test_signature_user_box'>\n            <SignPetitionForm onSubmit={postSignature} petition={petition} />\n            {confirmMessage && <p>{confirmMessage}</p>}\n            <LoadingBox loading={loading} error={error} errorMessage={errorMessage}/>\n        </section>\n    );\n}\n\nexport default SignPetitionSection","import { useLocation, Redirect } from 'react-router-dom';\nimport useGetData from  '../hooks/useGetData'\nimport { LoadingBox } from './MiscControls';\nimport SignPetitionSection from './SignPetitionSection';\nimport { useRef, useContext } from 'react';\nimport { AppContext } from '../contexts/AppContext';\n\nconst SignaturesList = ({ petition }) => {\n    const requestParams = useRef({ petition_id : petition['id'] });\n    const { data:sigData, getData:getSignatures, loading, error, errorMessage } = useGetData({ \n        url:'/api/signatures',\n        params:requestParams.current\n    });\n\n    const { data:userSignedData, getData:getUserSigned, usLoading, usError, usErrorMessage } = useGetData({ \n        url:'/api/user_signed',\n        params:requestParams.current\n    });\n\n    const onConfirmSign = () => {\n        getSignatures();\n        getUserSigned();\n    };\n\n    const show_sign_form = userSignedData != null && !userSignedData['user_signed'];\n\n    return (\n        <section>\n            <LoadingBox loading={loading} error={error} errorMessage={errorMessage}/>\n            <LoadingBox loading={usLoading} error={usError} errorMessage={usErrorMessage}/>\n            { sigData && <>\n                <h4>Revealed Signatures</h4>\n                <ul className='test_signature_user_group'>\n                { sigData.revealed_signatures.length < 1 && <li>No signatures have been revealed</li>}\n                { sigData.revealed_signatures.length > 0 && sigData.revealed_signatures.map((rs,index) => \n                <li key={index} className='users_list_item test_signature_user_box'>\n                    {rs}\n                </li>)}\n\n                </ul>\n                <h4>Unrevealed Signatures</h4>\n                <ul className='test_signature_user_group'>\n                { sigData.unrevealed_signatures.length < 1 && <li>There are no unrevealed signatures</li>}\n                { sigData.unrevealed_signatures.length > 0 && sigData.unrevealed_signatures.map((us,index) => \n                <li key={index} className='users_list_item test_signature_user_box'>\n                    There are {us['signatures']} unrevealed signatures at threshold {us['reveal_threshold']}\n                </li>)}\n\n                </ul>\n                { show_sign_form ? <SignPetitionSection petition={petition} onConfirm={onConfirmSign} /> :\n                    <p>You have already signed this petition.</p>\n                }\n            </>}\n        </section>\n    );\n}\n\nconst PetitionView = ({ basePath }) => {\n    const { loggedIn } = useContext(AppContext);\n    const location = useLocation();\n    const petitionId = location.pathname.replace(basePath, '');\n    const { data:petition, loading, error, errorMessage } = useGetData({ \n        url:`/api/petitions/${petitionId}`\n    });\n\n    if(!loggedIn) {\n        return <Redirect to='/login' />\n    }\n    return (\n        <section>\n            <LoadingBox loading={loading} error={error} errorMessage={errorMessage}/>\n            {petition && <>\n                <h2>Petition: {petition['subject']}</h2>\n                <p>Petition Text: {petition['petition_text']}</p>\n                <SignaturesList petition={petition}/>          \n            </>}\n        </section>\n    );\n}\n\nexport default PetitionView;","import { useEffect } from 'react'\nimport axios from 'axios';\nimport { useMutation } from 'react-query';\n\nconst useLogin = ({ url, onLoginSuccess }) => {\n    const postData = async ({ username, password}) => {\n        try {\n            const res = await axios.get(url, { auth:{ \"username\" : username, \"password\" : password } });\n            return res.data;\n        } catch (error) {\n            throw new Error(error.response.data.message);\n        }\n    }\n    const { mutate, isLoading, isError, error, isSuccess } = useMutation(postData);\n\n    useEffect(() => {\n        if(isSuccess) {\n            onLoginSuccess();\n        }\n    }, [isSuccess, onLoginSuccess])\n\n    const tryLogin = ({ username, password }) => {\n        mutate({ username, password });\n    }\n\n    const errorMessage = error ? error.message : \"\";\n    return { tryLogin, success:isSuccess, loading:isLoading, error:isError, errorMessage:errorMessage };\n}\n\nexport default useLogin;\n","import { useForm } from 'react-hook-form';\nimport { FormTextInput } from './FormControls';\nimport { FormContext } from '../contexts/FormContext';\n\nconst LoginForm = ({ onSubmit }) => {\n    const { register, handleSubmit, formState: { errors } } = useForm();\n    const onSubmitClick = (data) => {\n        onSubmit(data);\n    };\n\n    return (\n        <form className=\"input_form\" onSubmit={handleSubmit(onSubmitClick)}>\n            <FormContext.Provider value={{ register, errors }}>\n                <FormTextInput type='email' varName='email' visibleName='email' />\n                <FormTextInput type='password' varName='password' visibleName='password' />\n            </FormContext.Provider>\n            <input className=\"form_submit_btn\" type=\"submit\" value=\"Login\"/>\n        </form>\n    );\n}\n\nexport default LoginForm;\n","import useLogin from  '../hooks/useLogin';\nimport LoginForm from './LoginForm';\nimport { LoadingBox } from './MiscControls';\nimport { useContext } from 'react'\nimport { AppContext } from '../contexts/AppContext';\nimport { Redirect, Link } from 'react-router-dom';\n\nconst LoginView = () => {\n    const { refreshAuth, loggedIn } = useContext(AppContext);\n    const { tryLogin, success, loading, error, errorMessage } = useLogin({ url:'/api/login', onLoginSuccess:refreshAuth });\n    const submitLogin = (formData) => { tryLogin({ username:formData.email, password:formData.password }); };\n\n    if(loggedIn) {\n        return <Redirect to='/' />\n    }\n    return (\n        <section>\n            <h2>Login</h2>\n            { !success && <LoginForm onSubmit={submitLogin}/> }\n            { (loading || error) && <LoadingBox loading={loading} error={error} errorMessage={errorMessage} /> }\n            { success && <p>logged in.</p>}\n            <p>Don't have an account yet?<Link className='inline_link' to={`/register`}>Register A New Account</Link></p>\n        </section>\n    );\n}\n\nexport default LoginView\n","import { useForm } from 'react-hook-form';\nimport { FormTextInput } from './FormControls';\nimport { FormContext } from '../contexts/FormContext';\n\nconst RegisterUserForm = ({ onSubmit }) => {\n    const { register, handleSubmit, formState: { errors }, getValues } = useForm();\n    const onSubmitClick = (data) => {\n        onSubmit(data);\n    };\n\n    const onValidateConfirmPass = (value) => {\n        return getValues('password') === value;\n    }\n\n    return (\n        <form className=\"input_form\" onSubmit={handleSubmit(onSubmitClick)}>\n            <FormContext.Provider value={{ register, errors }}>\n                <FormTextInput type='email' varName='email' visibleName='email' />\n                <FormTextInput type='password' varName='password' visibleName='password' />\n                <FormTextInput \n                    type='password' varName='confirm_password' visibleName='confirm password' \n                    validateFunction={onValidateConfirmPass} validateErrorMessage=\"password doesn't match\"\n                />\n                <FormTextInput type='text' varName='first_name' visibleName='first name' />\n                <FormTextInput type='text' varName='last_name' visibleName='last name' />\n            </FormContext.Provider>\n            <input className=\"form_submit_btn\" type=\"submit\" value=\"Register Account\"/>\n        </form>\n    );\n}\n\nexport default RegisterUserForm;\n","import usePostData from  '../hooks/usePostData';\nimport RegisterUserForm from './RegisterUserForm';\nimport { LoadingBox } from './MiscControls';\nimport { Link } from 'react-router-dom';\n\nconst RegisterView = () => {\n    const onConfirm = () => {\n        console.log(\"confirmed registration!\")\n    };\n\n    const { post:postUser, confirmMessage, loading, error, errorMessage } = usePostData({ \n        url:'/api/users',\n        onConfirm:onConfirm,\n        confirmText:'Registered New Account!'\n    });\n\n    return (\n        <section>\n            <h2>Register</h2>\n            <p>Use this form to register a new account.</p>\n            <RegisterUserForm onSubmit={postUser}/>\n            { confirmMessage && <p>{confirmMessage} <Link className='inline_link' to={`/login`}>Login</Link></p>}\n            <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n        </section>\n    );\n}\n\nexport default RegisterView\n","import useGetData from  '../hooks/useGetData'\nimport { LoadingBox } from './MiscControls';\nimport { Link, Redirect } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { AppContext } from '../contexts/AppContext';\n\nconst HomeView = () => {\n    const { loggedIn } = useContext(AppContext);\n    const { data:groups, loading, error, errorMessage } = useGetData({ \n        url:'/api/petition_groups'\n    });\n\n    if(!loggedIn) {\n        return <Redirect to='/login' />\n    }\n    return (\n        <section>\n            <p>Welcome to the petition app!</p>\n\n            {groups && groups.length > 0 && <p>Here are a list of the petition groups that you're a member of</p>}\n            {groups && groups.length < 1 && <p>You are not a member of any petition groups yet. Would you like to create one?</p>}\n            <ul className='petition_groups_list_group'>\n            {groups && groups.map((petitionGroup) => \n            <li className='petition_groups_list_item' key={petitionGroup['id']}>\n                <Link className='petition_groups_list_btn' to={`/petition_group/${petitionGroup['id']}`}>View</Link>\n                <span>{petitionGroup['group_name']}</span>\n            </li>)}\n            </ul>\n            {groups && <div className='add_petition_group_btn'>\n                <Link className='add_petition_group_text' to='/add_petition_group'>Add New Petition Group</Link>\n            </div>}\n            <LoadingBox loading={loading} error={error} errorMessage={errorMessage} />\n        </section>\n    );\n}\n\nexport default HomeView\n","\nimport { SimpleButton } from './MiscControls';\nimport { Link } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { AppContext } from '../contexts/AppContext';\nimport usePostData from  '../hooks/usePostData';\n\nconst TopNavSection = () => {\n    const { authData, loggedIn, setLogout }= useContext(AppContext);\n    const loggedInUser = loggedIn ? authData.user_email : \"\";\n    const { post:logout } = usePostData({ url:'/api/logout', onConfirm:() => setLogout(true) });\n\n    return (\n        <section>\n            <h1 className='top_heading_text'>Petition App Prototype</h1>\n            <nav className='top_nav'>\n                <Link className='nav_link' to='/debug/users'>Users(debug)</Link>\n                { loggedIn && <Link className='nav_link' to='/'>Home</Link> }\n                { !loggedIn && <Link className='nav_link' to='/login'>Login</Link> }\n                { loggedIn && <SimpleButton className='nav_link' onBtnClick={logout} text='Logout'/> }\n            </nav>\n            <p className='logged_in_user_text'>{loggedInUser}</p>\n        </section>   \n    );\n}\n\nexport default TopNavSection\n","import useGetData from  './useGetData';\nimport { useState } from 'react';\n\nconst useGetAuthData = () => {\n    const [ logout, setLogout ] = useState(false);\n    const { data:authData, getData:getAuthData, loading, error, errorMessage } = useGetData({ \n        url:'/api/get_current_user',\n        logout:logout,\n        checkRetry:(errorMessage) => { return errorMessage !== \"Not logged in!\"; }\n    });\n\n    const loggedIn = authData != null && 'user_email' in authData;\n    \n    const refreshAuth = () => {\n        setLogout(false);\n        getAuthData();\n    }\n    return { authData, refreshAuth, loggedIn, setLogout, loading, error, errorMessage };\n}\n\nexport default useGetAuthData;","import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport DebugUsersView from './DebugUsersView';\nimport PetitionGroupView from './PetitionGroupView';\nimport AddPetitionGroupView from './AddPetitionGroupView';\nimport AddPetitionView from './AddPetitionView';\nimport PetitionView from './PetitionView';\nimport LoginView from './LoginView';\nimport RegisterView from './RegisterView';\nimport HomeView from './HomeView';\nimport TopNavSection from './TopNavSection';\nimport { AppContext } from '../contexts/AppContext';\nimport { LoadingBox } from './MiscControls'; \nimport useGetAuthData from '../hooks/useGetAuthData';\nimport { ReactQueryDevtools } from 'react-query/devtools';\n\nconst MainRouterSwitch = () => {\n  return (\n    <Switch>\n      <Route exact path='/' component={HomeView} />\n      <Route exact path='/register' component={RegisterView} />\n      <Route exact path='/debug/users' component={DebugUsersView} />\n      <Route exact path='/login' component={LoginView} />\n      <Route path='/petition_group/' component={ () => <PetitionGroupView basePath='/petition_group/' />} />\n      <Route exact path='/add_petition_group/'  component={AddPetitionGroupView} />\n      <Route path='/add_petition/' component={ () => <AddPetitionView basePath='/add_petition/' />} />\n      <Route path='/petitions/' component={ () => <PetitionView basePath='/petitions/' />} />\n      <Route exact path='/debug/users' component={DebugUsersView} />\n    </Switch>\n  );\n}\n\nconst MainAppRouter = () => {\n  const { authData, loggedIn, refreshAuth, setLogout, loading, error, errorMessage } = useGetAuthData();\n\n  return (\n      <>\n          <AppContext.Provider value={{ authData, loggedIn, refreshAuth, setLogout }}>\n            { !error && <LoadingBox loading={loading} error={error} errorMessage={errorMessage} /> }\n            {!loading && \n            <Router>\n              <TopNavSection />\n              <MainRouterSwitch />\n            </Router>}\n          </AppContext.Provider>\n          <ReactQueryDevtools initialIsOpen={false} />\n      </>\n  );\n}\n\n\n\nexport default MainAppRouter;\n","import './App.css';\nimport MainAppRouter from './components/MainAppRouter';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst App = () => {\n  const queryClient = new QueryClient();\n\n  return (\n      <div className=\"App\">\n        <QueryClientProvider client={queryClient}>\n        <MainAppRouter />  \n        </QueryClientProvider>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}